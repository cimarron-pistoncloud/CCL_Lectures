TITLE: Making a fusion peptide by joining Insulin a Leucine Zipper with a linker.

NOTE 1: In these tutorials, commands to be run from the operating system (OS) will
        be preceded by 'OS$', and commands to be run inside the docker container (DC)
	will be preceded by 'DC#'.

NOTE 2: Notice that for linux/ubunut users, we had to use sudo before every command outside
        the docker image, but once inside the docker image you do not need to use sudo anymore.
        This is because you have root access inside the docker container by default. If you
        are using Windows or a MAC, you might not need sudo, but you need to have root access
	to run docker commands. Please check.

1. Log on to the same image container that you worked on in the last lecture, and do
   the routine updates.

   OS$ sudo docker start <CONTAINER ID>
   OS$ sudo docker attach <CONTAINER ID>   

   once inside the docker container:

   DC# cd /home/Programs/EntropyMaxima/
   DC# git pull
   DC# python setup.py install
   DC# cd ../../CCL_Lectures/
   DC# git pull
   DC# cd Lecture_4/

2. Download insulin (2HIU) and Leucine zipper (2ZTA).

   DC# wget https://files.rcsb.org/view/2HIU.cif
   DC# wget https://files.rcsb.org/view/2ZTA.cif

3. Check for gaps in the structures.

   DC# pdb_cif.py gaps --input 2HIU.cif
   DC# pdb_cif.py gaps --input 2ZTA.cif

   The insulin structure (2HIU.cif) has 10 models. Models are repeated versions of the
   same protein inside a structure. If you open a PDB structure in VMD, you will see only one
   structure at the time. If you click the arrows at the bottom of the Main window in vmd, 
   the models will be shown one after the other, and it appears as if it is moving. This looks
   like a simulation, but it is not. 

   The insuline structure was obtained with Nuclear Magnetic Resonance (NMR),
   and not by x-ray diffractions of crystalized structures. NMR structures can give multiple
   snapshots, or models, of the structure to identify regions that move more. NMR techniques
   are restricted to small peptides. For more info:
   https://en.wikipedia.org/wiki/Nuclear_magnetic_resonance_spectroscopy_of_proteins

   In lecture 1 we saw that 1BRS.pdb has one structure with the protein of interes repeated
   three times in the same model. For 2HIU, the structure has multiple models instead of 
   one. This is not a formating inconsistency because 1BRS formed a crystal latice by the 
   oligomerization of three identical proteins. The 2HIU.pdb structure was obtain by NMR
   in solution, so the repeated structures are just representative of the range of motions
   of a single protein, and they are superimposed and not forming a lattice.   

3. The last two steps found no gaps in the two structures by checking residue numbers only,
   the next steps considers sequence information for detecting gaps at the begining an the 
   end of Leucine zipper (2ZTA).

   DC# gen_csv.py --fromcif --cif 2HIU.cif --out1 2HIU.csv --pep ../../EntropyMaxima/charmm_templates/peptides.pdb --top ../../EntropyMaxima/params/charmm27.ff/
   DC# gen_csv.py --fromcif --cif 2ZTA.cif --out1 2ZTA.csv --pep ../../EntropyMaxima/charmm_templates/peptides.pdb --top ../../EntropyMaxima/params/charmm27.ff/

   Copy the original crystal structures, as well as the completed ones in this step, to your
   computer's operating system and open them in VMD for visualization. We will continue working
   with the completed Leucine zipper. 

4. The previous steps add N and C terminals to cap the ends of proteins.

   DC# del_residue.py --rem "1,1,A,ACE" --inp 2HIU.csv --out 2HIU.csv --par ../../EntropyMaxima/params/charmm27.ff/
   DC# del_residue.py --rem "1,2,B,ACE" --inp 2HIU_1.csv --out 2HIU.csv --par ../../EntropyMaxima/params/charmm27.ff/

   DC# del_residue.py --rem "34,1,A,CTER" --inp 2ZTA.csv --out 2ZTA.csv --par ../../EntropyMaxima/params/charmm27.ff/
   DC# del_residue.py --rem "34,1,B,CTER" --inp 2ZTA.csv --out 2ZTA.csv --par ../../EntropyMaxima/params/charmm27.ff/

   Terminals are protein modifications that signal the begining and end of a chain. They have bioological and
   experimental relevance.

5. Now let's add a string of amino acids to insulin. These amino acids will work as a linker to Leucine zipper.
   They are added at the end of insuline chains where the N-terminal had been removed in the previous step, and it
   also specifies the direction the addition is made. Ndir adds the amino acids in the direction of where the
   N-terminal would be, and Cdir in the opositite directions. The two possible directions would add amino acids
   in oposites directions using atoms on the amino acid that is attached to as reference point.

   DC# add_residues.py --apn "1,1,A,Ndir" --res "SER,GLY,ASP,ASP,ASP,ASP,LYS" --inp 2HIU.csv --out 2HIU.csv --pep ../../EntropyMaxima/charmm_templates/peptides.pdb --par ../../EntropyMaxima/params/charmm27.ff/
   DC# add_residues.py --apn "1,2,B,Ndir" --res "SER,GLY,ASP,ASP,ASP,ASP,LYS" --inp 2HIU.csv --out 2HIU.csv --pep ../../EntropyMaxima/charmm_templates/peptides.pdb --par ../../EntropyMaxima/params/charmm27.ff/

6. Clean up. We will work on only one insulin structure, so we will delete some other files to
   make things neat.

   DC# rm 2HIU_2.pdb 2HIU_3.pdb 2HIU_4.pdb 2HIU_5.pdb 2HIU_6.pdb 2HIU_7.pdb 2HIU_8.pdb 2HIU_9.pdb 2HIU_10.pdb

7. For insulin and Leucine Zipper, reduce adds hydrogens to histidines, pdb_cif.py --prepare prepares files for charmm, and then charmm is ran.
 
   DC# reduce -HIS -FLIP -OH -ROTEXOH -BUILD -OCC0.0 -H2OOCC0.0 -H2OB1000 2HIU_1.pdb > 2hiu_1r.pdb
   DC# pdb_cif.py prepare --input 2hiu_1r.pdb --crdout 2hiu_1r.crd --seqfix yes
   DC# charmm < setup_2hiu.inp > setup_2hiu.out

   DC# reduce -HIS -FLIP -OH -ROTEXOH -BUILD -OCC0.0 -H2OOCC0.0 -H2OB1000 2ZTA_1.pdb > 2zta_1r.pdb
   DC# pdb_cif.py prepare --input 2zta_1r.pdb --crdout 2zta_1r.crd --seqfix yes
   DC# charmm < setup_2zta.inp > setup_2zta.out

9. Fix PDBs from Charmm output. For some reason charmm places the chain identifier in a different column that
   Biopyhton's parser can't detect.

   DC# pdb_cif.py fixpdb --input 2hiu_1rr.pdb
   DC# pdb_cif.py fixpdb --input 2zta_1rr.pdb

10.Build a flower or dandalion type of ensemble.

    DC# flower.py --center 2hiu_1rr.pdb --rotate 2zta_1rr.pdb --angle 45 --distance 45 --map yes --link "A:A,B:B" --par /home/Programs/EntropyMaxima/params/charmm27.ff/
